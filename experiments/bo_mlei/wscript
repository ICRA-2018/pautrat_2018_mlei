#! /usr/bin/env python
import sys
sys.path.insert(0, sys.path[0]+'/waf_tools')

import os
import limbo
import hexapod_dart

def options(opt):
    opt.load('hexapod_controller')
    opt.load('hexapod_dart')
    opt.load('ros')
    opt.load('hexa_control')

    opt.add_option('--robot', type='string', help='build for real robot (no graphic, no simulator)[true/false]', dest='robot')

def configure(conf):
    conf.get_env()['BUILD_GRAPHIC'] = False
    conf.get_env()['BUILD_ROBOT'] = False

    conf.load('hexapod_dart')
    conf.check_hexapod_dart()

    if conf.options.robot and conf.options.robot == 'true':
      conf.load('ros')
      conf.load('hexa_control')
      conf.check_ros()
      conf.check_hexa_control()
      if conf.env.DEFINES_ROS:
        conf.get_env()['BUILD_ROBOT'] = True


def build(bld):
    libs = 'HEXAPOD_CONTROLLER DART EIGEN BOOST_DART BOOST ROS DYNAMIXEL LIMBO LIBCMAES NLOPT SFERES2 BOOST_CHRONO RT '
    graphic_libs = 'DART_GRAPHIC ' + libs
    robot_libs = libs + ' ROS HEXACONTROL'
    cxxflags = bld.get_env()['CXXFLAGS']


    if bld.get_env()['BUILD_GRAPHIC'] == True:
      limbo.create_variants(bld,
                            source = 'bo_mlei.cpp',
                            uselib_local = 'limbo',
                            uselib = graphic_libs,
                            includes=". ../../src ../ ",
                            cxxflags = cxxflags,
                            variants = ['FLAT_GROUND, EASY_STAIRS, MEDIUM_STAIRS, HARD_STAIRS'])

    if bld.get_env()['BUILD_ROBOT'] == True:
      limbo.create_variants(bld,
                            source = 'bo_mlei.cpp',
                            uselib_local = 'limbo',
                            uselib = robot_libs,
                            includes=". ../../src ../ ",
                            cxxflags = cxxflags,
                            variants = ['ROBOT'])

    limbo.create_variants(bld,
                          source = 'bo_mlei.cpp',
                          uselib_local = 'limbo',
                          uselib = libs,
                          includes=". ../../src ../ ",
                          cxxflags = cxxflags,
                          variants = ['SIMU'])
